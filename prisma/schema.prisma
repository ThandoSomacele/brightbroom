// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String
  firstName     String
  lastName      String
  phone         String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  addresses     Address[]
  bookings      Booking[]
  payments      Payment[]
  cleanerBookings Booking[] @relation("CleanerBookings")
}

enum UserRole {
  CUSTOMER
  CLEANER
  ADMIN
}

model Address {
  id            String    @id @default(uuid())
  userId        String
  street        String
  aptUnit       String?
  city          String
  state         String
  zipCode       String
  instructions  String?
  isDefault     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings      Booking[]
}

model Service {
  id            String    @id @default(uuid())
  name          String
  description   String
  basePrice     Decimal   @db.Decimal(10, 2)
  durationHours Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  bookings      Booking[]
}

model Booking {
  id            String        @id @default(uuid())
  userId        String
  addressId     String
  serviceId     String
  cleanerId     String?
  status        BookingStatus @default(PENDING)
  scheduledDate DateTime
  duration      Int           // Duration in minutes
  price         Decimal       @db.Decimal(10, 2)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  user          User          @relation(fields: [userId], references: [id])
  address       Address       @relation(fields: [addressId], references: [id])
  service       Service       @relation(fields: [serviceId], references: [id])
  cleaner       User?         @relation("CleanerBookings", fields: [cleanerId], references: [id])
  payment       Payment?
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Payment {
  id                String        @id @default(uuid())
  bookingId         String        @unique
  userId            String
  amount            Decimal       @db.Decimal(10, 2)
  status            PaymentStatus @default(PENDING)
  paymentMethod     PaymentMethod @default(CREDIT_CARD)
  
  // PayFast specific fields
  payFastId         String?       // PayFast payment ID
  payFastToken      String?       // PayFast token for recurring payments
  merchantReference String?       // Your own reference number
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  booking           Booking       @relation(fields: [bookingId], references: [id])
  user              User          @relation(fields: [userId], references: [id])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  EFT
  MOBICRED
  SNAPSCAN
  ZAPPER
  OTHER
}
